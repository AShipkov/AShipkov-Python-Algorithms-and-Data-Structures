"""
Для каждого упражнения написать программную реализацию.

Код пишите в файлах с расширением .py в кодировке UTF-8 (в PyCharm работает по умолчанию).
Каждую задачу необходимо сохранять в отдельный файл. Рекомендуем использовать английские имена, например, les_6_task_1, les_6_task_2, и т.д.
Для оценки «Отлично» необходимо выполнить все требования, указанные в задании и примечаниях.
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);
проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
а проявили творчество, фантазию и создали универсальный код для замера памяти.
"""
import sys
from types import ModuleType

import platform
from distutils import util

print(sys.version_info)
# sys.version_info(major=3, minor=8, micro=1, releaselevel='final', serial=0)

print(platform.python_version())
# 3.8.1

print(sys.platform)
# darwin

print(util.get_platform())
# macosx-10.9-x86_64

print(platform.architecture())
# ('64bit', '')

"""
1.4. Пользователь вводит две буквы. Определить, на каких местах алфавита они стоят, и сколько между ними находится букв.
"""
def f(*qwarks):
    sum_size =0
    count = 0
    for i in qwarks:
        count+=1
        print(f'Переменная {count}: type = {type(i)}, size = {sys.getsizeof(i)}, object = {i}')
        sum_size += sys.getsizeof(i)
    return sum_size

letters = 'abcdefghijklmnopqrstuvwxyz'
letter_range = input('Введите диапазон символов от a до z через запятую: ').split(',')
#print(letter_range)
a = letters.index(letter_range[0]) + 1
b = letters.index(letter_range[1]) + 1
c = b - a
#print('Первая буква: {} - находится на {} позиции \nВторая буква: {} - находится на {} позиции\nРасстояние между ними {}'.format(letter_range[0], a, letter_range[1], b, c))

print(f'Переменные в сумме занимают {f(letters, letter_range, a, b,c)}')


"""
1 вариант
Введите диапазон символов от a до z через запятую: a,z
Переменная 1: type = <class 'str'>, size = 75, object = abcdefghijklmnopqrstuvwxyz
Переменная 2: type = <class 'list'>, size = 152, object = ['a', 'z']
Переменная 3: type = <class 'int'>, size = 28, object = 1
Переменная 4: type = <class 'int'>, size = 28, object = 26
Переменная 5: type = <class 'int'>, size = 28, object = 25
Переменные в сумме занимают 311
2 вариант
Введите диапазон символов от a до z через запятую: a,c
Переменная 1: type = <class 'str'>, size = 75, object = abcdefghijklmnopqrstuvwxyz
Переменная 2: type = <class 'list'>, size = 152, object = ['a', 'c']
Переменная 3: type = <class 'int'>, size = 28, object = 1
Переменная 4: type = <class 'int'>, size = 28, object = 3
Переменная 5: type = <class 'int'>, size = 28, object = 2
Переменные в сумме занимают 311
Вывод: количество занимаемой памяти не зависит от диапазона символов.

Вывод: Данная программа наиболее эффективная по использованию памяти. Далее коды будут написаны в файлах task_1_1_2 и task_1_1_3
"""
